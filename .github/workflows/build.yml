name: Build and Test

permissions:
  contents: write
  packages: write
  pages: write

on:
  push:
    branches:
      - master
  pull_request:
    paths-ignore: ['docs/**', 'mkdocs.yml']
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true    

jobs:

  test-postgresql-windows:
    if: true # false to skip job during debug
    name: Test on Windows
    runs-on: windows-latest
    steps:

    - name: Start PostgreSQL on Windows
      run: |
        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru

    - name: Create scheduler user on Windows
      run: |
        & $env:PGBIN\psql --command="CREATE USER scheduler PASSWORD 'somestrong'" --command="\du"

    - name: Create timetable database
      run: |
        & $env:PGBIN\createdb --owner=scheduler timetable
        $env:PGPASSWORD = 'somestrong'
        & $env:PGBIN\psql --username=scheduler --host=localhost --list timetable

    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Golang
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'

    - name: Test
      run: go test -v -p 1 -parallel 1 -failfast ./...



  test-postgresql-macos:
    if: true # false to skip job during debug
    name: Test on MacOS
    runs-on: macos-latest
    steps:

    - name: Start PostgreSQL on MacOS
      run: |
        brew update
        brew install postgresql@16
        brew link --force postgresql@16
        brew services start postgresql@16  
        echo "Check PostgreSQL service is running"
        i=10
        COMMAND='pg_isready'
        while [ $i -gt 0 ]; do
            echo "Check PostgreSQL service status"
            eval $COMMAND && break
            ((i--))
            if [ $i == 0 ]; then
                echo "PostgreSQL service not ready, all attempts exhausted"
                exit 1
            fi
            echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
            sleep 10
        done

    # Homebrew creates an account with the same name as the installing user, but no password
    - name: Create scheduler user
      run: |
        psql --command="CREATE USER scheduler PASSWORD 'somestrong'" --command="\du" postgres

    - name: Create timetable database
      run: |
        createdb --owner=scheduler timetable
        PGPASSWORD=somestrong psql --username=scheduler --host=localhost --list timetable

    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Golang
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'

    - name: Test
      run: go test -v -p 1 -parallel 1 -failfast ./...

  test-postgresql-ubuntu:
    if: true # false to skip job during debug
    name: Test and Build on Ubuntu
    runs-on: ubuntu-latest
    steps:

    - name: Start PostgreSQL on Ubuntu
      run: |
        sudo systemctl start postgresql.service
        pg_isready

    - name: Create scheduler user
      run: |
        sudo -u postgres psql --command="CREATE USER scheduler PASSWORD 'somestrong'" --command="\du"

    - name: Create timetable database
      run: |
        sudo -u postgres createdb --owner=scheduler timetable
        PGPASSWORD=somestrong psql --username=scheduler --host=localhost --list timetable

    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Golang
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'

    - name: Get dependencies
      run: |
        go mod download
        go version

    - name: GolangCI-Lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        
    - name: Test
      run: go test -failfast -v -timeout=300s -p 1 -coverprofile=profile.cov ./...

    - name: Coveralls
      uses: shogo82148/actions-goveralls@v1
      with:
        path-to-profile: profile.cov      

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        version: latest
        args: release --snapshot --skip=publish --clean

  build-docs:
    if: true # false to skip job during debug
    needs: [test-postgresql-ubuntu, test-postgresql-windows, test-postgresql-macos]
    name: Build Docs
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v5

    - name: Configure Git
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

    - name: Set up Golang
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'      
    
    - name: Set up gopages
      run: go install github.com/johnstarich/go/gopages@v0.1.29
    
    - name: Build Developer Docs
      run: gopages -out "docs/godoc" -base "/pg_timetable/devel/godoc" -internal

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.13
        cache: 'pip'
        cache-dependency-path: '**/requirements-doc.txt'

    - name: Install dependencies
      run: pip install -r docs/requirements-doc.txt

    - name: Check if we should push to gh-pages
      # if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      run: |
        git fetch origin gh-pages --depth=1
        echo "push_opt=--push" >> $GITHUB_ENV 

    - name: Build mkdocs
      run: mike deploy ${{ env.push_opt }} devel

  test-docker-images:
    if: true # false to skip job during debug
    needs: [test-postgresql-ubuntu, test-postgresql-windows, test-postgresql-macos]
    name: Test Docker Image Build
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v5

    - name: Prepare build metadata
      id: meta
      run: |
        echo "GIT_HASH=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "GIT_TIME=$(git show -s --format=%cI HEAD)" >> $GITHUB_OUTPUT
        echo "VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
    
    - name: Test build Docker image (fast, amd64 only)
      uses: ./.github/actions/build-docker
      with:
        dockerfile: docker/Dockerfile
        image-name: cybertecpostgresql/pg_timetable
        platforms: linux/amd64
        push: 'false'
        cache-scope: test-build
        build-args: |
          COMMIT=${{ steps.meta.outputs.GIT_HASH }}
          DATE=${{ steps.meta.outputs.GIT_TIME }}
          VERSION=${{ steps.meta.outputs.VERSION }}  