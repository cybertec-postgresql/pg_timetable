name: Go Build & Test
on: 
  push:
    paths:
      - '**.go'
      - '**.yaml'
      - '**.yml'
      - '**.sql'      
    branches:
      - '*'
    tags-ignore:
      - '*'
jobs:
  setup-postgresql-windows:
    if: true # skip job during debug
    name: Setup PostgreSQL on the latest Windows
    runs-on: windows-latest
    steps:

    - name: Start PostgreSQL on Windows
      run: |
        $pgService = Get-Service -Name postgresql*
        Start-Service -InputObject $pgService
        $PGBIN\pg_isready

    - name: Create scheduler user on Windows
      run: |
        $PGBIN\psql -c "CREATE USER scheduler PASSWORD 'somestrong'"
        $PGBIN\psql -c "\du"

    - name: Create timetable database
      run: |
        $PGBIN\createdb timetable -O scheduler
        PGPASSWORD=somestrong $PGBIN\psql --username=scheduler --host=localhost --list timetable 


  setup-postgresql-macos:
    if: false # skip job during debug
    name: Setup PostgreSQL on the latest MacOS
    runs-on: macos-latest
    steps:

    - name: Start PostgreSQL on MacOS
      if: ${{ matrix.os }} == "macos-latest"
      run: |
        brew services start postgresql
        echo "Check PostgreSQL service is running"
        i=10
        COMMAND='pg_isready'
        while [ $i -gt 0 ]; do
            echo "Check PostgreSQL service status"
            eval $COMMAND && break
            ((i--))
            if [ $i == 0 ]; then
                echo "PostgreSQL service not ready, all attempts exhausted"
                exit 1
            fi
            echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
            sleep 10
        done

    # Homebrew creates an account with the same name as the installing user, but no password
    - name: Create scheduler user
      run: |
        psql -c "CREATE USER scheduler PASSWORD 'somestrong'" postgres
        psql -c "\du" postgres

    - name: Create timetable database
      run: |
        createdb timetable -O scheduler
        PGPASSWORD=somestrong psql --username=scheduler --host=localhost --list timetable 

  setup-postgresql-ubuntu:
    if: false # skip job during debug
    name: Setup PostgreSQL on the latest Ubuntu
    runs-on: ubuntu-latest
    steps:

    - name: Start PostgreSQL on Ubuntu
      run: |
        sudo systemctl start postgresql.service
        pg_isready

    - name: Create scheduler user
      run: |
        sudo -u postgres psql -c "CREATE USER scheduler PASSWORD 'somestrong'"
        sudo -u postgres psql -c "\du"

    - name: Create timetable database
      run: |
        sudo -u postgres createdb timetable -O scheduler
        PGPASSWORD=somestrong psql --username=scheduler --host=localhost --list timetable    

  build:
    if: false # skip job during debug
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    name: Build & Test
    steps:
    
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go mod download
        go version

    - name: GolangCI-Lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.24.0
        ./bin/golangci-lint run -v

    - name: Start PostgreSQL
      if: ${{ matrix.os }} == "ubuntu-latest"
      run: |
        sudo service postgresql start
        pg_isready

    - name: Create scheduler user
      run: |
        sudo -u postgres psql -c "CREATE USER scheduler PASSWORD 'somestrong'"
        sudo -u postgres psql -c "\du"

    - name: Create timetable database
      run: |
        sudo -u postgres createdb timetable -O scheduler
        PGPASSWORD=somestrong psql --username=scheduler --host=localhost --list timetable
    
    - name: Test
      run: go test -v -p 1 -coverprofile=profile.cov ./...

    - name: Convert coverage to lcov
      uses: jandelgado/gcov2lcov-action@v1.0.2
      with:
          infile: profile.cov
          outfile: coverage.lcov

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: coverage.lcov

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@master
      with:
        args: release --snapshot --skip-publish --rm-dist
   